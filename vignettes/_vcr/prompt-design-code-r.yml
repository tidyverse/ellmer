http_interactions:
- request:
    method: POST
    uri: https://api.anthropic.com/v1/messages
  response:
    status: 200
    headers:
      date: Wed, 25 Jun 2025 16:48:14 GMT
      content-type: application/json
      anthropic-ratelimit-input-tokens-limit: '40000'
      anthropic-ratelimit-input-tokens-remaining: '40000'
      anthropic-ratelimit-input-tokens-reset: '2025-06-25T16:48:06Z'
      anthropic-ratelimit-output-tokens-limit: '16000'
      anthropic-ratelimit-output-tokens-remaining: '16000'
      anthropic-ratelimit-output-tokens-reset: '2025-06-25T16:48:15Z'
      anthropic-ratelimit-requests-limit: '1000'
      anthropic-ratelimit-requests-remaining: '999'
      anthropic-ratelimit-requests-reset: '2025-06-25T16:48:04Z'
      anthropic-ratelimit-tokens-limit: '56000'
      anthropic-ratelimit-tokens-remaining: '56000'
      anthropic-ratelimit-tokens-reset: '2025-06-25T16:48:06Z'
      request-id: req_011CQVHEknAQgXd35zTud4fZ
      strict-transport-security: max-age=31536000; includeSubDomains; preload
      anthropic-organization-id: bf3687d8-1b59-41eb-9761-a1fd70b24e7e
      via: 1.1 google
      cf-cache-status: DYNAMIC
      x-robots-tag: none
      server: cloudflare
      cf-ray: 9555f34cae1f6c70-DFW
      content-encoding: gzip
    body:
      string: '{"id":"msg_01E7tqg6ikpkRTL4KT2Dc5vx","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Here
        are a few ways to compute the mean and median of variables a through z, grouped
        by age and sex using tidyverse:\n\n## Method 1: Using `across()` with `summarise()`
        (Recommended)\n\n```r\nlibrary(dplyr)\n\n# Compute mean and median for variables
        a-z\nresult <- df %>%\n  group_by(age, sex) %>%\n  summarise(\n    across(a:z,
        list(mean = mean, median = median), .names = \"{.col}_{.fn}\"),\n    .groups
        = \"drop\"\n  )\n```\n\n## Method 2: If you want separate tables for mean
        and median\n\n```r\n# Mean values\nmeans <- df %>%\n  group_by(age, sex) %>%\n  summarise(across(a:z,
        mean), .groups = \"drop\")\n\n# Median values  \nmedians <- df %>%\n  group_by(age,
        sex) %>%\n  summarise(across(a:z, median), .groups = \"drop\")\n```\n\n##
        Method 3: Using `pivot_longer()` for a tidy format\n\n```r\nlibrary(tidyr)\n\nresult_long
        <- df %>%\n  group_by(age, sex) %>%\n  summarise(across(a:z, list(mean = mean,
        median = median)), .groups = \"drop\") %>%\n  pivot_longer(\n    cols = -c(age,
        sex),\n    names_to = c(\"variable\", \"statistic\"),\n    names_sep = \"_\",\n    values_to
        = \"value\"\n  )\n```\n\n## Method 4: If you need to handle missing values\n\n```r\nresult
        <- df %>%\n  group_by(age, sex) %>%\n  summarise(\n    across(a:z, list(\n      mean
        = ~mean(.x, na.rm = TRUE), \n      median = ~median(.x, na.rm = TRUE)\n    ),
        .names = \"{.col}_{.fn}\"),\n    .groups = \"drop\"\n  )\n```\n\nThe first
        method is usually the most practical as it gives you all statistics in one
        wide table with clear column names like `a_mean`, `a_median`, `b_mean`, `b_median`,
        etc."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":61,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":527,"service_tier":"standard"}}'
  recorded_at: 2025-06-25 16:48:14
recorded_with: vcr/1.7.0.91, webmockr/2.0.0
