http_interactions:
- request:
    method: POST
    uri: https://api.anthropic.com/v1/messages
    body:
      string: '{"model":"claude-sonnet-4-20250514","messages":[{"role":"user","content":[{"type":"text","text":"\n  How
        can I compute the mean and median of variables a, b, c, and so on,\n  all
        the way up to z, grouped by age and sex.\n"}]}],"stream":false,"max_tokens":4096}'
  response:
    status: 200
    headers:
      date: Wed, 22 Oct 2025 14:15:25 GMT
      content-type: application/json
      content-encoding: gzip
      anthropic-ratelimit-input-tokens-limit: '2000000'
      anthropic-ratelimit-input-tokens-remaining: '2000000'
      anthropic-ratelimit-input-tokens-reset: '2025-10-22T14:15:12Z'
      anthropic-ratelimit-output-tokens-limit: '400000'
      anthropic-ratelimit-output-tokens-remaining: '399000'
      anthropic-ratelimit-output-tokens-reset: '2025-10-22T14:15:25Z'
      anthropic-ratelimit-requests-limit: '4000'
      anthropic-ratelimit-requests-remaining: '3999'
      anthropic-ratelimit-requests-reset: '2025-10-22T14:15:10Z'
      anthropic-ratelimit-tokens-limit: '2400000'
      anthropic-ratelimit-tokens-remaining: '2399000'
      anthropic-ratelimit-tokens-reset: '2025-10-22T14:15:12Z'
      request-id: req_011CUNNqTr6RDYVCPDxdr1Fp
      strict-transport-security: max-age=31536000; includeSubDomains; preload
      anthropic-organization-id: bf3687d8-1b59-41eb-9761-a1fd70b24e7e
      x-envoy-upstream-service-time: '14453'
      via: 1.1 google
      cf-cache-status: DYNAMIC
      x-robots-tag: none
      server: cloudflare
      cf-ray: 99299af24a9ee95a-DFW
    body:
      string: '{"model":"claude-sonnet-4-20250514","id":"msg_011uHL39974KwmQaMX85QLhd","type":"message","role":"assistant","content":[{"type":"text","text":"There
        are several ways to compute mean and median for variables a through z grouped
        by age and sex. Here are the most common approaches:\n\n## Python with pandas\n\n```python\nimport
        pandas as pd\nimport numpy as np\n\n# Assuming your data is in a DataFrame
        called ''df''\n# with columns: age, sex, a, b, c, ..., z\n\n# Method 1: Using
        groupby with agg()\nresult = df.groupby([''age'', ''sex'']).agg([''mean'',
        ''median''])\n\n# Method 2: If you want to specify only variables a-z\nvariables_a_to_z
        = [chr(i) for i in range(ord(''a''), ord(''z'')+1)]\nresult = df.groupby([''age'',
        ''sex''])[variables_a_to_z].agg([''mean'', ''median''])\n\n# Method 3: More
        explicit control\nresult = df.groupby([''age'', ''sex'']).agg({\n    col:
        [''mean'', ''median''] for col in variables_a_to_z\n})\n\nprint(result)\n```\n\n##
        R\n\n```r\nlibrary(dplyr)\n\n# Method 1: Using dplyr\nresult <- df %>%\n  group_by(age,
        sex) %>%\n  summarise(across(a:z, list(mean = mean, median = median), .names
        = \"{.col}_{.fn}\"),\n            .groups = ''drop'')\n\n# Method 2: Using
        aggregate() base R\n# For mean\nmeans <- aggregate(. ~ age + sex, data = df[,
        c(\"age\", \"sex\", letters[1:26])], mean)\n# For median  \nmedians <- aggregate(.
        ~ age + sex, data = df[, c(\"age\", \"sex\", letters[1:26])], median)\n\n#
        Method 3: Using data.table\nlibrary(data.table)\ndt <- as.data.table(df)\nresult
        <- dt[, lapply(.SD, function(x) list(mean = mean(x), median = median(x))),
        \n             by = .(age, sex), .SDcols = letters[1:26]]\n```\n\n## SQL\n\n```sql\nSELECT
        \n    age, \n    sex,\n    AVG(a) as mean_a, PERCENTILE_CONT(0.5) WITHIN GROUP
        (ORDER BY a) as median_a,\n    AVG(b) as mean_b, PERCENTILE_CONT(0.5) WITHIN
        GROUP (ORDER BY b) as median_b,\n    -- ... repeat for each variable through
        z\n    AVG(z) as mean_z, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY z) as
        median_z\nFROM your_table\nGROUP BY age, sex\nORDER BY age, sex;\n```\n\n##
        Python with more formatting options\n\n```python\n# If you want a cleaner
        output format\ndef compute_stats(df):\n    variables = [chr(i) for i in range(ord(''a''),
        ord(''z'')+1)]\n    \n    # Compute grouped statistics\n    grouped_stats
        = df.groupby([''age'', ''sex''])[variables].agg([''mean'', ''median''])\n    \n    #
        Flatten column names\n    grouped_stats.columns = [''_''.join(col).strip()
        for col in grouped_stats.columns]\n    \n    # Reset index to make age and
        sex regular columns\n    result = grouped_stats.reset_index()\n    \n    return
        result\n\n# Usage\nstats_result = compute_stats(df)\nprint(stats_result.head())\n```\n\nThe
        pandas approach is generally the most straightforward and efficient for this
        type of analysis. The `groupby()` function handles the grouping by age and
        sex, while `agg()` computes both mean and median for all specified columns
        in one operation.\n\nChoose the method that best fits your programming environment
        and data format!"}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":45,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":0,"ephemeral_1h_input_tokens":0},"output_tokens":909,"service_tier":"standard"}}'
  recorded_at: 2025-10-22 14:15:25
recorded_with: VCR-vcr/2.0.0
