% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/provider-huggingface.r
\name{chat_huggingface}
\alias{chat_huggingface}
\title{Chat with a model hosted on Hugging Face Serverless Inference API}
\usage{
chat_huggingface(
  system_prompt = NULL,
  turns = NULL,
  base_url = "https://api-inference.huggingface.co/models/",
  api_key = hf_key(),
  model = NULL,
  seed = NULL,
  api_args = list(),
  echo = NULL
)
}
\arguments{
\item{system_prompt}{A system prompt to set the behavior of the assistant.}

\item{turns}{A list of \link{Turn}s to start the chat with (i.e., continuing a
previous conversation). If not provided, the conversation begins from
scratch.}

\item{base_url}{The base URL to the endpoint; the default uses OpenAI.}

\item{api_key}{The API key to use for authentication. You should not
supply this directly; instead, store your Hugging Face API key as an
environment variable (\code{HUGGINGFACE_API_KEY}) in your \code{.Renviron} file.
Use \code{usethis::edit_r_environ()} to modify it.}

\item{model}{The model to use for the chat. The default, \code{NULL}, will pick
a reasonable default, and tell you about. We strongly recommend explicitly
choosing a model for all but the most casual use.}

\item{seed}{Optional integer seed that ChatGPT uses to try and make output
more reproducible.}

\item{api_args}{Named list of arbitrary extra arguments appended to the body
of every chat API call. Combined with the body object generated by ellmer
with \code{\link[=modifyList]{modifyList()}}.}

\item{echo}{One of the following options:
\itemize{
\item \code{none}: don't emit any output (default when running in a function).
\item \code{text}: echo text output as it streams in (default when running at
the console).
\item \code{all}: echo all input and output.
}

Note this only affects the \code{chat()} method.}
}
\value{
A \link{Chat} object.
}
\description{
\href{https://huggingface.co/}{Hugging Face} hosts a variety of open-source
and proprietary AI models available via their Inference API.
To use the Hugging Face API, you must have an Access Token, which you can obtain
from your \href{https://huggingface.co/settings/tokens}{Hugging Face account}.

This function is a lightweight wrapper around \code{\link[=chat_openai]{chat_openai()}}, with
the defaults adjusted for Hugging Face. Model defaults to \verb{meta-llama/Llama-3.1-8B-Instruct}.
\subsection{Known limitations}{
\itemize{
\item Some models do not support the chat interface or parts of it, for example
\verb{google/gemma-2-2b-it} does not support a system prompt. You will need to
carefully choose the model.
}
}
}
\examples{
\dontrun{
chat <- chat_huggingface()
chat$chat("Tell me three jokes about statisticians")
}
}
\seealso{
Other chatbots: 
\code{\link{chat_bedrock}()},
\code{\link{chat_claude}()},
\code{\link{chat_cortex_analyst}()},
\code{\link{chat_databricks}()},
\code{\link{chat_deepseek}()},
\code{\link{chat_gemini}()},
\code{\link{chat_github}()},
\code{\link{chat_groq}()},
\code{\link{chat_ollama}()},
\code{\link{chat_openai}()},
\code{\link{chat_openrouter}()},
\code{\link{chat_perplexity}()}
}
\concept{chatbots}
