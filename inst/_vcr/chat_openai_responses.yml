http_interactions:
- request:
    method: POST
    uri: https://api.openai.com/v1/responses
    body:
      string: '{"input":[{"role":"user","content":[{"type":"input_text","text":"\n  What
        is the difference between a tibble and a data frame?\n  Answer with a bulleted
        list\n"}]}],"include":["reasoning.encrypted_content"],"model":"gpt-5","stream":false,"store":false}'
  response:
    status: 200
    headers:
      alt-svc: h3=":443"; ma=86400
      cf-cache-status: DYNAMIC
      cf-ray: 9929a7012cf54684-DFW
      content-encoding: gzip
      content-type: application/json
      date: Wed, 22 Oct 2025 14:23:48 GMT
      openai-organization: posit-esfrkf
      openai-processing-ms: '24389'
      openai-project: proj_IeWhBnzvOO8wbVR5MdxnGXFq
      openai-version: '2020-10-01'
      server: cloudflare
      set-cookie:
      - __cf_bm=ti5.fQdQX7CM6IvYbaP.TczcXJIIb6OVTWh_hOG3z3A-1761143028-1.0.1.1-iQUeK0sGi2K_dl_7HokXCJIjc0_njjuMq6kTVAy6TKOkUkiPktOfEIuJkBm_1ZsdOKWYbeMDMPPpxAI01YlpcGsoBSyYKS1i7mr7heO1keI;
        path=/; expires=Wed, 22-Oct-25 14:53:48 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=HW.QwatxTL9fpuM_eAqo3zoAJhUZr8U6qEMh5Fpfu1w-1761143028801-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      strict-transport-security: max-age=31536000; includeSubDomains; preload
      x-content-type-options: nosniff
      x-envoy-upstream-service-time: '24393'
      x-request-id: req_316b1165609d481484369e140c2b817d
    body:
      string: |-
        {
          "id": "resp_00a4aed1a1e9c6de0168f8e8dc68f08197b089a3802f536fbb",
          "object": "response",
          "created_at": 1761143004,
          "status": "completed",
          "background": false,
          "billing": {
            "payer": "developer"
          },
          "error": null,
          "incomplete_details": null,
          "instructions": null,
          "max_output_tokens": null,
          "max_tool_calls": null,
          "model": "gpt-5-2025-08-07",
          "output": [
            {
              "id": "rs_00a4aed1a1e9c6de0168f8e8dcf5d48197a379e1550f6c763d",
              "type": "reasoning",
              "encrypted_content": "",
              "summary": []
            },
            {
              "id": "msg_00a4aed1a1e9c6de0168f8e8f00cfc8197a01e626cd525a94c",
              "type": "message",
              "status": "completed",
              "content": [
                {
                  "type": "output_text",
                  "annotations": [],
                  "logprobs": [],
                  "text": "- Class and origin: A tibble is a modern reimagining of a data.frame (inherits from data.frame, classes: c(\"tbl_df\", \"tbl\", \"data.frame\")) with stricter, more predictable behavior.\n- Printing: Tibbles show only the first rows and columns that fit, include column types, and never print row names; data.frames print all columns and can print many rows, with no type summary.\n- Row names: Tibbles do not use row names (they\u2019re dropped or can be stored in a column); data.frames support row names.\n- Column name handling: Tibbles allow non-syntactic names and can maintain duplicates, with explicit \u201cname repair\u201d options; data.frames also allow these but without standardized repair behavior.\n- Type conversion on creation: Tibbles never convert character to factor; data.frames historically converted (stringsAsFactors=TRUE before R 4.0.0; now default FALSE).\n- Subsetting with [: tibble[, j] always returns a tibble (no drop argument needed); data.frame[, j] can return a vector by default unless drop=FALSE.\n- Subsetting with $ and [[:\n  - Tibbles never do partial matching; [[ errors on unknown columns; $ returns NULL for unknown columns without partial matching.\n  - data.frame $ can do partial matching; [[ by default uses exact=TRUE but can be used with partial matching if exact=FALSE.\n- Recycling and size checks: Tibbles are strict\u2014column assignment requires length 1 or exactly n rows; otherwise error. data.frames are more permissive and may recycle (sometimes with a warning).\n- Column types and list-columns: Both support list-columns, but tibbles emphasize stable types and won\u2019t silently change types during common operations.\n- Performance and ecosystem: Tibbles add safety checks and nicer display (slightly more overhead) and integrate tightly with the tidyverse; data.frames are base R\u2019s minimal, faster-by-default structure with broader legacy expectations (e.g., row names)."
                }
              ],
              "role": "assistant"
            }
          ],
          "parallel_tool_calls": true,
          "previous_response_id": null,
          "prompt_cache_key": null,
          "reasoning": {
            "effort": "medium",
            "summary": null
          },
          "safety_identifier": null,
          "service_tier": "default",
          "store": false,
          "temperature": 1.0,
          "text": {
            "format": {
              "type": "text"
            },
            "verbosity": "medium"
          },
          "tool_choice": "auto",
          "tools": [],
          "top_logprobs": 0,
          "top_p": 1.0,
          "truncation": "disabled",
          "usage": {
            "input_tokens": 29,
            "input_tokens_details": {
              "cached_tokens": 0
            },
            "output_tokens": 1893,
            "output_tokens_details": {
              "reasoning_tokens": 1472
            },
            "total_tokens": 1922
          },
          "user": null,
          "metadata": {}
        }
  recorded_at: 2025-10-22 14:23:48
- request:
    method: POST
    uri: https://api.openai.com/v1/responses
    body:
      string: '{"input":[{"role":"user","content":[{"type":"input_text","text":"\n  What
        is the difference between a tibble and a data frame?\n  Answer with a bulleted
        list\n"}]},{"id":"rs_00a4aed1a1e9c6de0168f8e8dcf5d48197a379e1550f6c763d","type":"reasoning","encrypted_content":"","summary":[]},{"role":"assistant","content":[{"type":"output_text","text":"-
        Class and origin: A tibble is a modern reimagining of a data.frame (inherits
        from data.frame, classes: c(\"tbl_df\", \"tbl\", \"data.frame\")) with stricter,
        more predictable behavior.\n- Printing: Tibbles show only the first rows and
        columns that fit, include column types, and never print row names; data.frames
        print all columns and can print many rows, with no type summary.\n- Row names:
        Tibbles do not use row names (they’re dropped or can be stored in a column);
        data.frames support row names.\n- Column name handling: Tibbles allow non-syntactic
        names and can maintain duplicates, with explicit “name repair” options; data.frames
        also allow these but without standardized repair behavior.\n- Type conversion
        on creation: Tibbles never convert character to factor; data.frames historically
        converted (stringsAsFactors=TRUE before R 4.0.0; now default FALSE).\n- Subsetting
        with [: tibble[, j] always returns a tibble (no drop argument needed); data.frame[,
        j] can return a vector by default unless drop=FALSE.\n- Subsetting with $
        and [[:\n  - Tibbles never do partial matching; [[ errors on unknown columns;
        $ returns NULL for unknown columns without partial matching.\n  - data.frame
        $ can do partial matching; [[ by default uses exact=TRUE but can be used with
        partial matching if exact=FALSE.\n- Recycling and size checks: Tibbles are
        strict—column assignment requires length 1 or exactly n rows; otherwise error.
        data.frames are more permissive and may recycle (sometimes with a warning).\n-
        Column types and list-columns: Both support list-columns, but tibbles emphasize
        stable types and won’t silently change types during common operations.\n-
        Performance and ecosystem: Tibbles add safety checks and nicer display (slightly
        more overhead) and integrate tightly with the tidyverse; data.frames are base
        R’s minimal, faster-by-default structure with broader legacy expectations
        (e.g., row names)."}]},{"role":"user","content":[{"type":"input_text","text":"Tell
        me three funny jokes about statisticians"}]}],"include":["reasoning.encrypted_content"],"model":"gpt-5","stream":false,"store":false}'
  response:
    status: 200
    headers:
      alt-svc: h3=":443"; ma=86400
      cf-cache-status: DYNAMIC
      cf-ray: 9929a79b2d8d4684-DFW
      content-encoding: gzip
      content-type: application/json
      date: Wed, 22 Oct 2025 14:24:05 GMT
      openai-organization: posit-esfrkf
      openai-processing-ms: '16944'
      openai-project: proj_IeWhBnzvOO8wbVR5MdxnGXFq
      openai-version: '2020-10-01'
      server: cloudflare
      set-cookie:
      - __cf_bm=hwsB8L_27zUmAeLSQFOJ.bWNZO4Z.ZJOc..6Q0ArofE-1761143045-1.0.1.1-.kg9VbX2QqK3onNBSpwSIRGeT0UYkY.85bVqMiqXi0q5EQhYk1E3h5LY.NO0.I_pOxFOUW35DCPcd5AxFrn.qOYxcno_bnbdKTVZfXF_3iw;
        path=/; expires=Wed, 22-Oct-25 14:54:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=uRMFv2HT4POCHrZeFUVagiX0_biHMzeJTlZNRJ.eNDY-1761143045987-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      strict-transport-security: max-age=31536000; includeSubDomains; preload
      x-content-type-options: nosniff
      x-envoy-upstream-service-time: '16951'
      x-request-id: req_7d0eac7e6eaa4cae98fdd3d07a4522c7
    body:
      string: |-
        {
          "id": "resp_00a4aed1a1e9c6de0168f8e8f50e888197aa1ee4470a3a4bb7",
          "object": "response",
          "created_at": 1761143029,
          "status": "completed",
          "background": false,
          "billing": {
            "payer": "developer"
          },
          "error": null,
          "incomplete_details": null,
          "instructions": null,
          "max_output_tokens": null,
          "max_tool_calls": null,
          "model": "gpt-5-2025-08-07",
          "output": [
            {
              "id": "rs_00a4aed1a1e9c6de0168f8e8f5e43c8197b98945bd458c7b51",
              "type": "reasoning",
              "encrypted_content": "gAAAAABo-OkFYg7JY_HgfyObWD9hsSHz_49mGcIpDScXFgN1PVZbb76dnMe1Sm1DinjZD60LgYIQ13hHSFtYqTIxubPO5oNvVbDs0Et3RqWotW2NPUT4CrwxblCbFuDAIe925BVJjdWgD53hoBLra-253228s8aO7n4-y422lRxvrxdbUXzSLXplfrQVkPdI56nzgHM6KKVqsjKBQ9MDs5y99a-LRThHgLo9M6KMpTbZzOf_qLEBhNdqMKqbo49RhyXod6w0QU5GNG2l75rNen3vXR8JnkmtIU1I9UC-q4CpEhd2CGHgm2lmLXf1x887ezilKKsoh5PL87gixC9Uaz_4xieO1FRL2bXyApdNcEtLASiJH_c0IQPgbzDHRSd_62ClmyUmKoCilLMfU7qXV8YbosgP-r88Kk47uCq2PZ-OSkdeJEgMrF4cqUA0WkYyDGmKJa3rlvuCX6JBqiCkMoldcOfwEuZcat2otr0jCwljcpfL56c5IJTTWP0bOBBlLzG94bRXxZ5ljfO88SmP5v4RMzHy5wWgSZ9N2IwX2GzxQKcN7P7gbAk_G-G2PBHjnMI0eiI5ud4phWtlRpcbAyQHdjshwXSPwsXoZfZk6LatXMKGlTxYUXb8X9TR4t5AIO5fuy-_XGxpg_m7k8sQISO2rHCkgauM3XCkrdxHqPwbiLav9PoPw_IgLNggamJSR3uXnNfs5e_qi6iYNU42IsM1Y9IntQEilC-u1Q9zk7ueRQw6GoLrLAhmi77IfC3APekzkp8a6T3qH8ISdEU7JZic5n9CuAxRj7qFI2G0s1CEcSpkAmwqRuiX51JbfYWLmi0X-jOglw_phShHnTIWg8er8yqCcVfoI_o9hF1hg3w6208hBa-xTEp_3dw9GNxDejoexmLmwh_2BUf61fmFJKACrBNy-DyZ9keW-e15BOBRZOQD9owtILs_1vSmrkZRVSx7RQisvnF5b6BxJCXINMErbp7IBRCIgaZIcEpuN_G-ng5Y3YMQ3_KtFINo5R0uu0r20lH2pbi3IBfGKmnpQP0qGWDj4_XqHE0shBIVeUisVW6K1gW_QunbsIn-Ez23BBmQ3tHIkuPhNvXd7zGGl2rXqegG0kc_xuAlUV27c4xupRKnHHA6PpRfXChkTVEA3GWsjo1FqGJM7fih-bKAjWUAc4k3ZIIMpTo6x9svH02WUeucfY9lGObv4e5P01vWkrY-2gYzlNi7ZPLo_uHzrj8fQxZMBGCLTLiouX6T5GGLJgYpg2gEQJjzgv31Jgmi5ys444AeIjvry59PoombFoCcdrcBJbR1sJCziHJvTm7OWq4DgMpFDv9icVddOrLrF_Q6r0W0SaHm4ofKS-fNrAvFruEt41fclwZkq6Ljjd9x3q_OIfT7ul5ovY0SOvZU8PZT0B8e-pPq6R-kbvO9YzfQPST9uZ8RUxs2TlwTZbNO-PZsQLT8IeHJthRE3Q73d4nxqu-KYM4Xov-YZihsKVfx7K_fRSCiy3w2HLzeCmQAQEoRde561ZOpEcCKN3PC5R2JimLKFjldAX_rKry-49m80AGoV2dw3i72T9Ego71XulDhZZUdyiiK_mhI5eGKy3MtQJADdGJPpeiWPkI7QkoXirgeX5fvjfasJsu-DUyvBmwcMSCDIpmaRAFwtI5Lg0VmQaULL-B-R1PaDD88NtXfpL-BWI-RlXg5wZ0KCAATgV_LjfAzUqifGNgRsWySgH29dG6Q_fHW9lkf1hbvFrNtbTzvLBGDLcyeLaKX6EPQe1JiqqkhgjQXKDpPQNIcxMpLkU8dIKVG8U7gfwQVFzwpBFycpPsw8qTujTzkMK-3bnHaLHnCGWbX2UcmRL8FozhAiQMIfwtD3Y483z8W3L83gq1HAaTR9_eNvjP80HU4T6SHCoT-KYHFbnX03xCDsJZsvUKUDLScEgqF8iecEI1xQGiptn6ACqonlU2rHSC_D8ghydypEMPRaDV9TSnNQFnedGLzgRmOeFTY1jcJz9ZEUZmKaOU6VhmWdhuiVA9bNxt6dhswJw6RR_0tDY7R5f2TKniN2glzpT50mpwMycYNMzUWxKoXGvNeucORyyHJw3l3pZIvVNANfbBg0jfT73AnoXailEN_hoULlpcHthOVIPVSOPirhIem1OtdKiOyrukVOviJnStnNo4_DaM6pITyuQST-Y5Ox6WbweCRsKgJccStOuPnZguTgI3M3ohfnM03XC3yCORW9Ug0Uf1c8Tk0Y7MutqOjm0C-xQcA1MrV5TshprNyVZIhY5EXYtsUmYsLKwjumQihjaspEJWeFUwRWKi901OR9c3Cp8_RyqLraJ0PSUFE_EnOOAIIfTXY7xLSHk-Vd1dLAUC98urMkA7DtHz--2ZMZqbJ7UHeCwukhmWT3tI64CcFXbLa72hjcCK1cTiGPIwIOghJDqZWZGaDYYQ2wJbOLd7V2iaEQJmnCBqLPI3rFE3jSHXkfrRUAXitMJjbNcJb_v3XJ4RAhY5eFdKyPLbDkgzkTZA47tyegvhgQ3eltC9Cyz7DaqzeoydiUT3HO2VvQ_rM-fDtiqY0XKbFPbPETXYlbGaa5XhKkOcSAk647OjvGwktBNgQ47_d5L9aVmMJT-dkhZ-dOyiaJRH1cX2Xt2twyjf_ypwKaM3PachWoxUomhJ-hiSi91QiK4lLr4jxz6uTteGZs0WXsAWZbDAK1E2O3xsanW45RbUUwRa3naI5Wdk6gMEC7WYQ3TCQ7Sj-BVJE7vkpZQ-twfqvXke1kCopzdoWgrJuVoXNCs2sjOVlfyrJnkreSBQUjffExzn6h_HUB-iPAT_jvBWhRBazjPLZ1luGZlQd3rSIsFimE-DdKhjKN2-4JZKcbJDMmrb95YS4cdAomitw3BWh72HKyGb7ni5vvDCUrfkZZDHx5_Wwsv1dM4olBaaHKtaU_OLmaUTZzogHZ1_6XOzvmKmeel2ClUSkeTDexMrH3df2vMrZXt4qma7YoDy37fU6nlzJ4ibeqg4Zw10mvgDRomzTqAefYDCwJDhZcITSZsD1z4vR_BB2LE2E8mGkze1KGKB08x6RcP2BI1xnIbnMiilGGcB0OEvj7JJnpoSSyJW8GQ9LpikLzmCitaBs70APi-SEcg22cqUvLkiICaw0nHo-X08bfsqHt6HmCj7UfZoP69Yzgfpw_-ZoTCcNxeosBqxKvxY0vtfBLUGCpNXfA0OUNaTh1wlXAp3FA6NxkxUagcw35Fu1rLI84HK2IEcPo_RwOs3SwWuxfpNXvhuRvxx3lJdY_oU57KFcFQ5-2npVtp9vrMoV9D5TkwPP8-9rl1wpfV-IGVrYqDfagVKGMwJVQERuJjkHuASDnvGRwINIGW4oORytrKcaTW62EDc9F5OImAMUXsuiBW4fUt2Rj5j1_sMLcs4cllGvB_I6zgAnBKi4ccQ_o4i4cmj45XWCxcRLmM0YOwgBMpi-wmyS2w0zq5M1B-shRVUk-7Eg0B6CNbDXvBNhf12UreQFgDfDIyEcNbW7h5ulyfQY1dij8fSeMYfS6uu6om8WDx9yTpWnVhDW6wf44g47OjPBVLLRetZr24BqzTIlBpXzOi1bEE-p85u4cRjbT_fCXRzDhls6VksYLbk03jN-hR_f6RUvndUNHIHSG_zdcY7v9By7vMhXERezfT4bXrkkGeUfLpng2K0QTpsvIYBWESiVCfrImKad3mzpvbjvBbHV3QSlwZSm5mzb6Vosktgp_CK8dmVPfaMu3P16raDEfQAMXW6k_howABxvhdaIh03L9lU7lmP3vGkA7n3QpW44G_kDKvRGISeko43XOEwKIDnKb94D3xLRdjgdRWaRnaPsTqhr_8p8wNcNl68HpvlgqSo-Z3VyMOjv3B-kj2271BtYvKBhWV_a-GW_500uhGYhn3EGQ9Ledh2kSwo0lMjCi3189qht37wQszMzvBcvP2kORm27k9D0H-_7uKq36g3ENXniCNmmLhgG_xOkurabhH6JW-VGA5mdsV4r1rEZD4kzE3bXNJq0jglfdQtPbfU8XYMgz3ZY0gSIg34LnpAy5SLZ2bwFCuBzii_VjonZuyAyfO-rPHCVIkoUITIRypqCk9IinKtHA7ogU6OyVz2AqqGj9Iuxnc57Fu0hgrpTn16oyguF1SFQLpGFvAc-dt4Z5y4r3aO2CJExZ4ObfhUMa0d9e1k3tpsKKaeUZBH91ifGTeycnA8zYwc1A2m7yxJ1EkyHthpL_-Y-9DMAZzpOgujip1IssWfv0z3AN3XGWWgVmMsGGP93J2LlH0YBOTWGkH5NAFCR9HUkejmYfhWXZhP0a81aaCxGY7HzpLWTrHiMvUiz65wCzJkIsGwT2-T0ARaXiF3pjM5_C35jYkJEihzZDy6IC3gDkjkOVX3H50HVY898nNHM6UQWmgqnB5GH_CvlgWIYUYekPjNue5pjp7rWCt45G8V8E9Z3MbPNMrMW_UfzGhLJGNxxUlsVW10Le8wlVUsOikKpfvfB1Ux5PrjqjpyOuUh829ZxfxrC6y8yQJ9Qu-GqTZ2BOED3Zssia86uojII9utZVe9pUSNOZ5erXOCskXrUYg0NMTHYQ2QbXq7PFjavvtA-PsrcdwsQRVEYpGitYkAfsV4J8lJmG6nEagZI9rAcRY5nVZoGhE0QfRm1QKY-hn2GkSN7RwDtm7D-VZsBo6ZunQOcsnm625jrtQd3BrAN1prTvl6afawLD_VK8mN1UbWKnHpL7v_SxvKdKopMaxjwXfRQPghAV4Ji9kcSnwQktgWgmt6AJkHho6MMOWdRcskinhWk4DEsRN6RXt0U4X-IwnsJ3VGYz9zl3HyQlBLp9cbDraSO7nUidM0HOjGLslk1VlfB7sZivTNF-KRh9zMGlZ5Lvcwl-F6byPQ_d5TqqUWYn1iSgAgM7CeYe-qWB8OGgd4WA0-C4qKMIorilUNZ6jF0XdiD8n9QAFfBIZRMBy7vmRzjbMVHgPuB3ZXXtdFmT5Yta6T03YM1OOBjB8GKKP9b3izNFsMIYSLpqFeFipcFapehmG8yGNHJ9Om7EKLtS9wqfw-VRZpx4rt4QwCz5t5d4uzEGTzQvIt075nwVP3Z4W2Bdc7dwSYreADbA6EKM8_mxmVAWhy1jqmVZSC5PxV2-htLpU8fHPHk-pSIM-527gapkHd68Dl1NfJOJtI1f4oB8pyD6bg_RNElX_3XbVs-s3IKEHcjF25rRK1WNf7rOYrXrjxT1OANZ92V0w2krJ7guVHRzI55jDmWnirXCoJT9apObH9xkMnAcVO9PIrwpP3lM2mM_Q2KekCyvxu6lH85bTsLOaaan1vC15XdahDzVX1w0TOI1cchNDs3h6TgNWcauCLpgsqN5p4=",
              "summary": []
            },
            {
              "id": "msg_00a4aed1a1e9c6de0168f8e90544b08197b4d3954086150cbf",
              "type": "message",
              "status": "completed",
              "content": [
                {
                  "type": "output_text",
                  "annotations": [],
                  "logprobs": [],
                  "text": "- An engineer, a physicist, and a statistician go deer hunting. The engineer misses 1 meter to the left, the physicist misses 1 meter to the right, and the statistician shouts, \u201cWe got it!\u201d\n- I have a joke about p-values, but sadly it wasn\u2019t significant.\n- A statistician can have one foot in ice water and the other in boiling water and say, \u201cOn average, I feel fine.\u201d"
                }
              ],
              "role": "assistant"
            }
          ],
          "parallel_tool_calls": true,
          "previous_response_id": null,
          "prompt_cache_key": null,
          "reasoning": {
            "effort": "medium",
            "summary": null
          },
          "safety_identifier": null,
          "service_tier": "default",
          "store": false,
          "temperature": 1.0,
          "text": {
            "format": {
              "type": "text"
            },
            "verbosity": "medium"
          },
          "tool_choice": "auto",
          "tools": [],
          "top_logprobs": 0,
          "top_p": 1.0,
          "truncation": "disabled",
          "usage": {
            "input_tokens": 462,
            "input_tokens_details": {
              "cached_tokens": 0
            },
            "output_tokens": 803,
            "output_tokens_details": {
              "reasoning_tokens": 704
            },
            "total_tokens": 1265
          },
          "user": null,
          "metadata": {}
        }
  recorded_at: 2025-10-22 14:24:05
recorded_with: VCR-vcr/2.0.0
